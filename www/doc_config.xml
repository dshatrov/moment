<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mync SYSTEM "entities.dtd">

<moment>
<moment_docpage/>
<content>
  <pagename>
    <eng>Documentation - Configuration</eng>
    <rus>Документация - Настройка</rus>
  </pagename>
  <title>
    <eng>Configuration</eng>
    <rus>Настройка</rus>
  </title>

  <moment_toc>
    <dl>
      <dt><a href="doc_config.ru.html#config">Основной конфигурационный файл</a></dt>
      <dt><a href="doc_config.ru.html#flashsrc">Получение видео от Flash-клиентов</a></dt>
      <dt><a href="doc_config.ru.html#transcoding">Захват и перекодирование видео</a></dt>
      <dt><a href="doc_config.ru.html#ipcam">Захват видео с IP-камер</a></dt>
      <dt><a href="doc_config.ru.html#cam">Захват видео с локальных камер</a></dt>
      <dt><a href="doc_config.ru.html#inputs">Получение видео из других источников</a></dt>
      <dt><a href="doc_config.ru.html#playlists">Списки воспроизведения (плейлисты)</a></dt>
      <dt><a href="doc_config.ru.html#recording">Запись видео</a></dt>
    </dl>
  </moment_toc>

  <p>
    В этом разделе описывается синтаксис конфигурационных файлов видеосервера и приводится
    список доступных параметров конфигурации. Примеры полной найстройки сервера для типовых
    задач можно найти в разделе <a href="doc_examples.ru.html">&laquo;Примеры использования&raquo;</a>.
  </p>

  <a name="config">
    <moment_section>
      <eng>Main configuration file</eng>
      <rus>Основной конфигурационный файл</rus>
    </moment_section>
  </a>

  <p>
    <rus>
      По умолчанию основной конфигурационный файл видеосервера &mdash; /opt/moment/moment.conf<br/>
      Другой путь к конфигурационному файлу можно задать опцией <tt>-c</tt> при запуске сервера:
    </rus>
  </p>

<pre>/opt/moment/bin/moment -c /path/to/moment.conf</pre>

  <moment_subsection>
    <eng>moment.conf syntax</eng>
    <rus>Синтаксис файла moment.conf</rus>
  </moment_subsection>

  <p>
    Файл конфигурации состоит из секций. Каждая секция ограничена фигурными скобками {}.
    Секции могут иметь название. Допускаются вложенные секции.
  </p>

<pre>MySection {
  InnerSection {
  }
}
</pre>

  <p>
    Внутри секций задаются параметры. Строковые значения рекомендуется заключать в двойные кавычки.
    Параметры можно разделять точкой с запятой или переводом строки.
  </p>

<pre>Section {
  MyParameter = "MyValue"
  width = 60; height = 40
}
</pre>

  <p>
    Возможно использование директив препроцессора C (кроме #include):
  </p>

<pre>#define VPATH "file:///this/is/a/long/path/"
mod_gst {
  FirstVideo  = VPATH "first_video.ogv"
  SecondVideo = VPATH "second_video.flv"
}
</pre>

  <p>
    Можно делать комментарии в стиле C:
  </p>

<pre>
http {
  // Однострочный комментарий
  /* Многострочный комментарий */
  #if 0
    #if 0
      Вложенный многострочный комментарий.
    #endif
  #endif
}
</pre>

  <p>
    Сетевые адреса в значениях параметров имеют вид "ip-адрес:порт" или "dns-имя:порт".
    Адрес или порт можно опустить. Примеры адресов: "momentvideo.org:80", "kernel.org", "192.168.0.1", ":8080".
  </p>

  <p>
    Будем обозначать параметры конфигурации полным путём к параметру по секциям.
    Например, параметр my/deep/parameter в файле конфигурации задаётся так:
  </p>

<pre>my {
  deep {
    parameter = "value"
  }
}
</pre>

  <p>
    Далее приводится список основных параметров.
  </p>

  <moment_subsection>
    <eng>General configuration parameters</eng>
    <rus>Общие параметры конфигурации</rus>
  </moment_subsection>

  <moment_params>
    <p><b>moment/module_path</b> &mdash; путь для поиска плагинов к видеосерверу.
    По умолчанию: /opt/moment/lib/moment-1.0/</p>
    <p><b>moment/num_threads</b> &mdash; количество потоков для обслуживания сетевых клиентов.
    По умолчанию: 0 (обслуживать клиентов в главном потоке).</p>
    <p><b>moment/num_file_threads</b> &mdash; количество потоков для записи видео на диск.
    По умолчанию: 0 (выполнять запись из главного потока).</p>
    <p><b>page_pool/min_pages</b> &mdash; минимальное кол-во страниц памяти в пуле страниц на сервере
    (размер одной страницы - 4 КБ).</p>
  </moment_params>

  <moment_subsection>
    <eng>RMTP settings</eng>
    <rus>Настройки RTMP</rus>
  </moment_subsection>

  <p>За обслуживание Flash-клиентов по протоколам RTMP и RTMPT отвечает модуль <i>mod_rtmp</i>.</p>

  <moment_params>
    <p><b>mod_rtmp/enable</b> &mdash; включить поддержку RTMP и RTMPT (yes/no).</p>
    <p><b>mod_rtmp/rtmp_bind</b> &mdash; IP-адрес интерфейса и порт TCP, на который сервер принимает
    соединения по протоколу RTMP. По умолчанию: ":1935"</p>
    <p><b>mod_rtmp/rtmpt_bind</b> &mdash; IP-адрес интерфейса и порт TCP, на который сервер принимает
    соединения по протоколу RTMPT. По умолчанию: ":8081"</p>
    <p><b>mod_rtmp/send_delay</b> &mdash; задержка отправки аудио и видеосообщений в миллисекундах.
    Задержка отправки данных (буферизация на сервере) позволяет существенно повысить производительность сервера.
    Так, при задержке 100 миллисекунд нагрузка на процессор при большом числе одновременно подключенных клиентов
    снижается в 2,5 раза. Значение по умолчанию: 50 мс.</p>
    <p><b>mod_rtmp/audio_waits_video</b> &mdash; не отправлять клиентам аудиосообщения, пока не будет отправлено
    первое видеосообщение. По умолчанию: "no" (передавать аудио, не дожидаясь видео).</p>
  </moment_params>

  <moment_subsection>
    <eng>HTTP settings</eng>
    <rus>Настройки HTTP</rus>
  </moment_subsection>

  <p>
    &laquo;Момент&raquo; может принимать произвольные HTTP-запросы и передавать их на обработку
    модулям, подписавшимся на запросы с определённым префиксом URI.
    Для приёма команд администратора в форме HTTP-запросов выделяется отдельный порт.
  </p>

  <moment_params>
    <p><b>http/http_bind</b> &mdash; адрес привязки HTTP. По этому адресу, в частности,
    будут доступны статические файлы, отдаваемые модулем <i>mod_file.</i></p>
    <p><b>http/admin_bind</b> &mdash; адрес привязки HTTP для команд администратора.</p>
    <p><b>http/keepalive_timeout</b> &mdash; таймаут неактивности HTTP-соединений в секундах.
    По истечении таймаута соединение разрывается. По умолчанию: 60 сек.</p>
  </moment_params>

  <p>
    Модуль <i>mod_file</i> предназначен для отдачи HTTP-клиентам небольших статических файлов
    (HTML-страниц и изображений) с локальных дисков по протоколу HTTP.
    Этот модуль не предназначен для передачи видео.
    Параметры конфигурации <i>mod_file</i>:
  </p>

  <moment_params>
    <p><b>mod_file/enable</b> &mdash; включить mod_file (yes/no). По умолчанию: "yes" (<i>mod_file</i> включен).</p>
  </moment_params>

  <p>
    Список путей к файлам и соответствующих этим путям префиксов URI задаётся набором безымянных секций.
    В каждой секции определяются два параметра:
  </p>

  <moment_params>
    <p><b>path</b> &mdash; директория, из которой отдаются файлы;</p>
    <p><b>prefix</b> &mdash; префикс в URI. Например, если файлы должны быть доступны по URL
    http://myserver.com/my_files/, то параметру prefix нужно присвоить значение "my_files".</p>
  </moment_params>

  <p>
    Пример настройки mod_file:
  </p>

<pre>mod_file {
  enable = yes
  {
    path = "/opt/moment/myplayer"
    prefix = "moment"
  }
  {
    path = "/opt/moment/mychat"
    prefix = "mychat"
  }
}
</pre>

  <a name="flashsrc">
    <moment_section>
      <eng>Receiving video from Flash clients</eng>
      <rus>Получение видео от Flash-клиентов</rus>
    </moment_section>
  </a>

  <p>
    &laquo;Момент&raquo; может получать видео от Flash-клиентов и передавать его другим клиентам
    без дополнительной настройки.
  </p>
  
  <p>
    По умолчанию, если клиент подключается и начинает
    передавать на сервер видео с определённым названием канала, то этот канал становится
    доступным другим клиентам для просмотра. Автоматическое предоставление доступа к видео
    можно отключить, присвоив параметру <b>mod_rtmp/publish_all</b> значение "no".
    В этом случае передача видео от Flash будет доступна только через те плагины видеосервера, которые
    это разрешают явно.
  </p>

  <a name="transcoding">
    <moment_section>
      <eng>Video grabbing and transcoding</eng>
      <rus>Захват и перекодирование видео</rus>
    </moment_section>
  </a>

  <p>
    Для получения видео из внешних источников &laquo;Moment&raquo; использует
    мультимедийный фреймворк <a href="http://gstreamer.freedesktop.org/features/">GStreamer</a>,
    обладающий богатыми возможностями по захвату видео, его перекодированию и преобразованию
    &laquo;на лету&raquo; с широким спектром поддерживаемых форматов и кодеков.
  </p>

  <p>
    За взаимодействие с GStreamer отвечает модуль <i>mod_gst</i>. Общие настройки модуля:
  </p>

  <moment_params>
    <p><b>mod_gst/enable</b> &mdash; включить модуль <i>mod_gst</i>. По умолчанию: "yes" (<i>mod_gst</i> включен).</p>
    <p><b>mod_gst/gst_debug</b> &mdash; включить отладочные сообщения gstreamer. Отладочные сообщения можно включать
    для выявления причин неполадок при захвате/перекодировании видео. По умолчанию: "off" (выключено).</p>
  </moment_params>

  <p>
    С точки зрения настройки видеосервера взаимодействие с GStreamer сводится
    к заданию конвейеров обработки, определяющих источник видео и последовательность преобразований.
    Конвейеры состоят из отдельных элементов, каждый из которых выполняет некоторую операцию над видеопотоком.
    Конвейеры описываются с использованием синтаксиса, принимаемого утилитой <i>gst-launch</i>.
    Подробную информацию об этой утилите можно найти в системной документации и в документации GStreamer.
  </p>

  <p>
    Для наиболее простых случаев захвата и перекодирования видео видеосервер предлагает конвейеры
    предопределённой формы. Это существенно упрощает описание захватываемого видеопотока:
    достаточно указать URL ресурса, с которого сервер должен получать видео.
    Такие источники задаются в секции <b>mod_gst/sources</b> в виде пар
    <tt>"название канала" = "URI источника видео"</tt>. Пример:
  </p>

<pre>
  mod_gst {
    sources {
      "Первый канал" = "mms://myvideostreams.com/first"
      "Спорт" = "http://sport.example.domain/tv/sport"
      "12 Стульев" = "file:///home/user/video/12 стульев.avi"
    }
  }
</pre>

  <p>
    Для источников из списка "sources" можно задать ширину/высоту видео на выходе
    и желаемый битрейт сжатого видеопотока
    (применяется ко всем источникам):
  </p>

  <moment_params>
    <p><b>mod_gst/width</b> &mdash; ширина видео (для секции "sources");</p>
    <p><b>mod_gst/height</b> &mdash; высота видео (для секции "sources").</p>
    <p><b>mod_gst/bitrate</b> &mdash; битрейт, определящий степень сжатия видео, Кбит/сек</p>
  </moment_params>

  <p>
    Для использования полного набора возможностей по захвату и перекодированию
    видеопотоки определяются в секции <b>mod_gst/streams</b>. Каждый видеопоток
    описывается отдельной безымянной секцией. Существует три варианта задания
    источника видео:
  </p>

  <ol>
    <li>Через URL источника;</li>
    <li>Описанием конвейера gstreamer;</li>
    <li>Списком воспроизведения (плейлистом).</li>
  </ol>

  <p>
    Параметры описания источника видео, общие для всех способов:
  </p>

  <moment_params>
    <p><b>name</b> &mdash; название видеопотока. По этому названию клиенты
    запрашивают у сервера видеопоток.</p>
    <p><b>record_path</b> &mdash; путь для записи видео на диск.
    Если параметр не задан, то запись видео не производится.</p>
  </moment_params>

  <moment_subsection>
    <eng>URL sources</eng>
    <rus>Задание источника по URL</rus>
  </moment_subsection>

  <p>
    Для задания источника по URL используется параметр <b>url</b>. Это самый простой способ,
    которого достаточно во многих случаях. Пример:
  </p>

<pre>
  {
    // Получаем видео с IP-камеры по протоколу RTSP.
    name = "Камера 1"
    url = "rtsp://91.200.224.242/mpeg4/media.amp"
  }
</pre>

  <!-- TODO default_width, default_height, default_bitrate -->

  <moment_subsection>
    <eng>GStreamer pipelines</eng>
    <rus>Конвейеры gstreamer</rus>
  </moment_subsection>

  <p>
    С помощью конвейеров gstreamer можно выполнять полный набор операций по захвату,
    перекодированию и преобразованию видео. Конвейер gstreamer &mdash; это цепочка
    элементов, каждый из которых выполняет некоторую операцию над видеопотоком.
  </p>

  <p>
    Конвейеры описываются строками, в которых перечисляются элементы и определяются связи
    между ними. Работу конвейеров можно проверять отдельно от видеосервера с помощью
    утилиты <i>gst-launch</i>. Синтаксис описания конвейеров в файлах конфигурации видеосервера
    совпадает с синтаксисом, описанным в документации <i>gst-launch</i>.
    Вот так с помощью <i>gst-launch</i> можно запустить простейший конвейер,
    выводящий на экран настроечную таблицу цветов:
  </p>

<pre>gst-launch videotestsrc ! autovideosink</pre>

  <p>
    Этот конвейер состоит из двух элементов. Элемент <i>videotestsrc</i> генерирует видеопоток
    (настроечную таблицу), а <i>autovideosink</i> отображает видео на экране в отдельном окне.
  </p>

  <p>
    Для того, чтобы &laquo;Момент&raquo; мог использовать конвейер для получения видео,
    должны быть соблюдены следующие условия:
  </p>

  <ol>
    <li>Цепочка обработки видео должна заканчиваться элементом <i>fakesink</i> с именем "video" (параметр <tt>name="video"</tt>) и параметром <tt>sync=true</tt>;</li>
    <li>Цепочка обработки звука должна заканчиваться элементом <i>fakesink</i> с именем "audio" (параметр <tt>name="audio"</tt>) и параметром <tt>sync=true</tt>;</li>
    <li>Видео и аудио, попадающее в элементы <i>fakesink</i>, должно быть закодировано одним из поддерживаемых видеосервером кодеков.</li>
  </ol>

  <p>В потоке может не быть видео или аудио.</p>

  <p>При захвате видео через конвейер gstreamer описание конвейера задаётся параметром <b>chain</b>.
    Примеры готовых конвейеров gstreamer &mdash; в следующих разделах.
    Список всех доступных элементов для построения конвейеров и справку по каждому элементу можно получить
    с помощью утилиты <i>gst-inspect.</i>
  </p>

  <moment_subsection>
    <eng>Playlists</eng>
    <rus>Плейлисты</rus>
  </moment_subsection>

  <p>См. раздел <a href="#playlists">&laquo;Списки воспроизведения&raquo;</a></p>

  <a name="ipcam">
    <moment_section>
      <eng>Working with IP cameras</eng>
      <rus>Захват видео с IP-камер</rus>
    </moment_section>
  </a>

  <p>
    Захват видео с камер осуществляется указанием в конфигурационном файле URL видеопотока,
    либо заданием конвейера, соответствующего виду потока, отдаваемого камерой.
    Захват видео по протоколу RTSP:
  </p>
<pre>
  url = "rtsp://10.1.12.3/mpeg4/media.amp"
</pre>

  <p>
    Конвейер для захвата MJPEG, передаваемого по HTTP, и перекодирования видео в h.264:
  </p>
<pre>
  chain = "souphttpsrc location=http://192.168.0.1/mjpg/video.mjpg ! \
           multipartdemux ! jpegdec ! ffmpegcolorspace !             \
           x264enc speed-preset=ultrafast profile=low bitrate=500 !  \
           fakesink name=video"
</pre>

  <a name="cam">
    <moment_section>
      <eng>Working with local cameras</eng>
      <rus>Захват видео с локальных камер</rus>
    </moment_section>
  </a>

  <p>
    При работе под Linux видео с локальных камер захватывается при помощи
    подсистемы "Video for Linux". Элемент, выполняющий захват видео &mdash; <i>v4l2src</i>.
    Пример конвейера для захвата видео с камеры:
  </p>
<pre>
  chain = "v4l2src device=/dev/video0 ! video/x-raw-yuv,width=320,height=240 ! \
           ffmpegcolorspace ! ffenc_flv ! fakesink name=video"
</pre>

  <a name="inputs">
    <moment_section>
      <eng>Receiving video from other sources</eng>
      <rus>Получение видео из других источников</rus>
    </moment_section>
  </a>

  <a name="gst_examples">
  Далее приводятся примеры построения конвейеров gstreamer для различных источников видео.
  </a>

<p>
  <b>Пример 1.</b> Генерируем настроечную таблицу и кодируем видео кодеком Sorenson H.263
</p>
<pre>
  {
    chain = "videotestsrc ! ffenc_flv ! fakesink name=video sync=true"
    name = "Пример 1"
  }
</pre>

<p>
  <b>Пример 2.</b> Добавляем к таблице цветов (см. пример 1) звуковой гудок, кодируемый кодеком Nellymoser.
</p>
<pre>
  {
    chain = "videotestsrc ! ffenc_flv ! fakesink name=video sync=true \
             audiotestsrc ! ffenc_nellymoser ! fakesink name=audio sync=true"
    name = "Пример 2"
  }
</pre>

<p>
   <b>Пример 3.</b> Читаем видео из файла, применяем эффект "старой плёнки" (agingtv),
   кодируем. Для элемента agingtv требуется конвертация видео в другой формат
   цветового представления, используем для этого элементы ffmpegcolorpace.
</p>
<pre>
  {
    chain = "uridecodebin uri=file:///home/user/video.avi !  \
             ffmpegcolorspace ! agingtv ! ffmpegcolorspace ! \
             ffenc_flv ! fakesink name=video sync=true"
    name = "Пример 3"
  }
</pre>

<p>
  <b>Пример 4.</b>
  Организуем скринкаст (транслируем картинку с экрана).
  Выполняем захват видео с экрана с частотой 15 кадров/сек и кодируем
  видеопоток кодеком "Screen Video".
</p>
<pre>
  {
    screencast =                                                          \
        "ximagesrc use-damage=false do-timestamp=true show-pointer=true ! \
         video/x-raw-rgb,framerate=15/1 !                                 \
         ffmpegcolorspace !                                               \
         ffenc_flashsv ! fakesink name=video"
    name = "Пример 4"
  }
</pre>

  <a name="playlists">
    <moment_section>
      <eng>Playlists</eng>
      <rus>Списки воспроизведения (плейлисты)</rus>
    </moment_section>
  </a>

  <p>
    С помощью плейлистов можно организвать вещание видео из разных источников по расписанию.
    Плейлист представляет собой линейный список элементов воспроизведения. Каждый
    элемент содержит описание источника видео (URI, путь к файлу или конвейер gstreamer) и может
    сопровождаться атрибутами "начало", "конец", "длительность" и "начальное положение".
  </p>

  <p>
    Плейлист описывается отдельным XML-файлом. Корневой тэг &mdash; <i>playlist</i>.
    Элементы плейлиста &mdash; теги <i>item</i>. В теге <i>item</i> должен
    содержаться один из следующих тегов:
  </p>

  <moment_params>
    <p><i>uri</i> &mdash; URI источника видео;</p>
    <p><i>path</i> &mdash; путь к видеофайлу;</p>
    <p><i>chain</i> &mdash; описание конвейера gstreamer.</p>
  </moment_params>

  <p>
    Атрибуты тега <i>item</i>:
  </p>

  <moment_params>
    <p><i>start</i> &mdash; время/дата начала воспроизведения;</p>
    <p><i>end</i> &mdash; время/дата окончания воспроизведения;</p>
    <p><i>duration</i> &mdash; длительность воспроизведения. Значение &mdash; время или "full" (играть до конца файла).
    По умолчанию: "full";</p>
    <p><i>seek</i> &mdash; позиция начала воспроизведения. Перед началом показа видео будет перемотано в эту позицию.</p>
  </moment_params>

  <p>
    Возможные форматы времени: СС, ММ:СС, ЧЧ::ММ:СС
    (C &mdash; секунды, М &mdash; минуты, Ч &mdash; часы).
    Форматы дат: ММ/ДД, ГГГГ/ММ/ДД (Г &mdash; год, М &mdash; месяц, Д &mdash; день).
  </p>

  <p>
    Пример файла плейлиста:
  </p>
<pre>
<![CDATA[<playlist>
  <!-- Начинаем показ 27-го ноября в 12:00 -->
  <item start="11/27 12:00" end="13:00" seek="15">
    <path>
      /home/user/video/Movie.avi
    </path>
  </item>
  <item start="13:30" duration="15:00">
    <uri>
      rtsp://channel_one.com/live/stream.sdp
    </uri>
  </item>
  <item>
    <chain>
      chain = "videotestsrc ! ffenc_flv ! fakesink name=video sync=true"
    </chain>
  </item>
</playlist>]]>
</pre>

  <p>
    Для задания потока с воспроизведением по плейлисту
    определяем параметр <b>playlist</b>, содержащий путь к файлу плейлиста:
  </p>
<pre>
mod_gst {
  streams {
    {
      name = "Онлайн-ТВ"
      playlist = "/opt/moment/playlist_tv.xml"
    }
  }
}
</pre>

  <a name="recording">
    <moment_section>
      <eng>Recording video</eng>
      <rus>Запись видео</rus>
    </moment_section>
  </a>

  <p>
    &laquo;Момент&raquo; может записывать транслируемое видео на диск непрерывно или по расписанию
    в файлы формата flv.
  </p>

  <p>
    Для непрерывной записи видео нужно задать в описании потока параметр <b>record_path</b>, содержащий
    путь к записываемым файлам:
  </p>
<pre>
  {
    name = "Поток 1"
    url = "rtsp://91.200.224.242/mpeg4/media.amp"
    record_path = "/home/user/records/stream_1"
  }
</pre>

  <p>
    Запись будет разделяться на отдельные файлы с суффиксом, содержащим дату и время начала записи: "_ГГГГ-ММ-ДД_ЧЧ-ММ-СС.flv"
  </p>

  <p>
    Для записи по расписанию используется плейлист такого же формата, как и для списков воспроизведения.
    Основное отличие &mdash; вместо источников видео в теге <i>item</i> задаётся параметр "id"
    с названием записываемого канала. Пример плейлиста для записи:
  </p>
<pre>
<![CDATA[<playlist>
  <item start="12:00" duration="30" id="channel_one"/>
  <item duration="20" id="channel_two"/>
</playlist>]]>
</pre>

  <p>
    В конфигурационном файле запись по расписанию задаётся в секции <b>mod_gst/recordings</b>
    списком безымянных подсекций. В каждой подсекции определяются два параметра:
  </p>

  <moment_params>
    <p><b>playlist</b> &mdash; путь к файлу плейлиста;</p>
    <p><b>record_path</b> &mdash; путь к записываемым файлам.</p>
  </moment_params>

  <p>
    Пример:
  </p>

<pre>
mod_gst {
  recordings {
    {
      playlist = "recording_playlist.xml"
      record_path = "/home/user/records/my_stream"
    }
  }
}
</pre>


</content>
</moment>

